                                                                                                               07/01/2025

Q) Write a java program to decode the string ?

input:
	AAJF

output:
	1106

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		String str="AAJF";

		for(int i=0;i<str.length();i++)
		{
			int n= (int) (str.charAt(i) - 'A' + 1);

			if(String.valueOf(n).contains("0"))
			{
				String numstr= Integer.toString(n);

				char ch=numstr.charAt(numstr.length()-1);

				n = Character.getNumericValue(ch);
			}

			System.out.print(n);
		}

	}
}




StringBuffer 
============
If our content change frequently then it is never recommanded to go with String object because for every change a new object will be created.

To overcome this limitation Sun Micro System introduced StringBuffer concept.

In StringBuffer, all the required changes will be done in a same object only.

constructor 
-----------

1)StringBuffer sb=new StringBuffer();
------------------------------------
It is used to create empty StringBuffer object with default initial capacity of 16.

If capacity reaches to maximum capacity then new capacity will be created with below formulea.

ex:
	new capacity = current_capacity + 1 * 2;

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		StringBuffer sb=new StringBuffer();
		System.out.println(sb.capacity());//16

		sb.append("abcdefghijklmnop");
		System.out.println(sb.capacity());//16

		sb.append("qr");
		System.out.println(sb.capacity());//16+1*2 = 34
	}
}


2)StringBuffer sb=new StringBuffer(int initialcapacity);
-------------------------------------------------------
It will create StringBuffer object with specified initial capacity.

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		StringBuffer sb=new StringBuffer(19);
		System.out.println(sb.capacity());//19
	}
}



3)StringBuffer sb=new StringBuffer(String s)
-------------------------------------------
It will create StringBuffer object equivalent to String.

Here capacity will be created with below formulea.

ex:
	capacity = 16 + s.length();

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		StringBuffer sb=new StringBuffer("ihub");
		System.out.println(sb.capacity());//16+4=20
	}
}


Q) Write a java program to display reverse of a string?

input:
	hello 

output:
	olleh 

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		String str="hello";

		StringBuffer sb=new StringBuffer(str);

		String  rev = sb.reverse().toString();

		System.out.println(rev);
	}
}

Q) Write a java program to check given string is palindrome or not?

input:
	racar 

output:
	It is a palindrome string 

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		String str="racar";

		StringBuffer sb=new StringBuffer(str);

		String  rev = sb.reverse().toString();

		if(str.equals(rev))
			System.out.println("It is a palindrome string");
		else
			System.out.println("It is not a palindrome string");
	}
}


Q) Write a java program to multiply two arrays?

input:
	5 2 3 
	1 4 

output:
	7322 (523*14)

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		int[] arr1={5,2,3}; 
		int[] arr2={1,4};

		//caller method 
		int a = Integer.parseInt(arrayToString(arr1));
		int b = Integer.parseInt(arrayToString(arr2));
		System.out.println(a*b);	
	}
	//callie method 
	public static String arrayToString(int[] arr)
	{
		StringBuffer sb=new StringBuffer();

		for(int i:arr)
		{
			sb.append(i);
		}

		return sb.toString();
	}
}


Q) Write a java program to count number of 2's present in a given number?

input:
	22 

output:
	6 (2,12,20,21,22) 	


class Test  
{
	public static void main(String[] args) 
	{
		int n=22;

		StringBuffer sb=new StringBuffer();

		for(int i=1;i<=n;i++)
		{
			sb.append(i);
		}

		int cnt=0;

		for(int i=0;i<sb.length();i++)
		{
			int num = Character.getNumericValue(sb.charAt(i));

			if(num == 2)
			{
				cnt++;
			}
		}

		System.out.println(cnt);
	}
}

Q) Write a java program to display the string in a given format?

input:
	ABBCCCDDDD

output:
	A1B2C3D4


class Test  
{
	public static void main(String[] args) 
	{
		String str="ABBCCCDDDD";

		StringBuffer sb=new StringBuffer();

		int cnt=1;

		for(int i=0;i<str.length();i++)
		{
			if(i<str.length()-1 && str.charAt(i) == str.charAt(i+1))
			{
				cnt++;
			}
			else
			{
				sb.append(str.charAt(i)).append(cnt);
				cnt=1;
			}
		}

		System.out.println(sb.toString());
	}
}


Q) Write a java program to display reverse of a given number?

input:
	123

output:
	321


class Test  
{
	public static void main(String[] args) 
	{
		int n=123;

		String str = Integer.toString(n);

		StringBuffer sb=new StringBuffer(str);

		n = Integer.parseInt(sb.reverse().toString());

		System.out.println(n);

	}
}



StringBuilder 
============
StringBuilder is exactly same as StringBuffer with following differences.

StringBuffer					StringBuilder
------------					--------------
All methods present in StringBuffer are 	No method present in StringBuilder is 
synchronized.					synchronized.

At a time only one thread is allowed to 	Multiple threads are allowed to operate on 
operate on StringBuffer object. Hence 		StringBuilder object. Hence StringBuilder is 
StringBuffer is thread safe.			not thread safe.

Waiting time of a thread will increase		There is no waiting threads effectively performance  
effectively performance is low.			is high.

It is introduced in 1.0v.			It is introduced in 1.5v.


Note:
-----
If our content not change frequently then we need to use String.

If our content change frequently where thread safety is required then we need to use StringBuffer.

If our content change frequently where thread safety is not required then we need to use StringBuilder.


StringTokenizer 
===============
StringTokenizer is a class which is present in java.util package.

It is used to tokenize the string based on regular expression.

We can create StringTokenizer class object as follow.

ex:
	StringTokenizer st=new StringTokenizer(String str,RegularExpression regex);

StringTokenizer class contains following five methods.
ex:
	public boolean hasMoreTokens()
	public String nextToken()
	public boolean hasMoreElements()
	public Object nextElement()
	public int countTokens() 

ex:
---
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		StringTokenizer st=new StringTokenizer("this is java class"," ");

		System.out.println(st.countTokens());
	}
}

ex:
---
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		StringTokenizer st=new StringTokenizer("this is java class"," ");

		while(st.hasMoreTokens())
		{
				String s = st.nextToken();
				System.out.println(s);
		}
	}
}

ex:
--
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		StringTokenizer st=new StringTokenizer("this is java class"," ");

		while(st.hasMoreElements())
		{
				String s = (String)st.nextElement();
				System.out.println(s);
		}
	}
}

ex:
---
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		StringTokenizer st=new StringTokenizer("9,99,999",",");

		while(st.hasMoreElements())
		{
				String s = (String)st.nextElement();
				System.out.println(s);
		}
	}
}


Random 
======
Random class present in java.util package.

Random class is used to generate the numbers.

ex:
---
import java.util.Random;
class Test  
{
	public static void main(String[] args) 
	{
		Random r=new Random();

		int num = r.nextInt(100);

		System.out.println(num);
	}
}
































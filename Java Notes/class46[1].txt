                                                                                         24/01/2025

Q) Types of Data Structures in Java?

Diagram: class46.1




Q) Write a java program to display lucky number from given array?

input:
	2 3 7 4 9 3 6 6 3 9 10 

output:
	3 

input:
	1 2 2 3 3 3 4 4 4 4

output:
	4  


ex:
---
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		int[] arr={2,3,7,4,9,3,6,6,3,9,10};

		Map<Integer,Integer> map=new LinkedHashMap<Integer,Integer>();

		//for each loop
		for(int i:arr)
		{
			if(map.containsKey(i))
			{
				map.put(i,map.get(i)+1);
			}
			else
			{
				map.put(i,1);
			}
		}
		int x=0;
		int max=-1;

		for(Map.Entry<Integer,Integer> entry: map.entrySet())
		{
			if(entry.getKey() == entry.getValue())
			{
				x=entry.getKey();
				max = Math.max(max,x);
			}
		}
		System.out.println("Lucky number is ="+max);
	}
}

Types of cursors in java
=======================
Cursors are used to read the objects one by one from Collections.

We have three cursors in java.

1) Enumeration 

2) Iterator 

3) ListIterator 

1) Enumeration 
--------------
Enumeration is an interface which is present in java.util package.

Enumeration interface is used to read objects one by one from legacy Collection objects.

We can create Enumeration object as follow.

ex:
	Enumeration e = v.elements();

Enumeration interface contains following two methods.
ex:
	public boolean hasMoreElements()
	public Object nextElement() 

ex:
----
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		Vector v=new Vector();

		for(int i=1;i<=10;i++)
		{
			v.add(i);
		}
		System.out.println(v);//[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

		Enumeration e=v.elements();
		while(e.hasMoreElements())
		{
			Integer i=(Integer)e.nextElement();
			System.out.println(i);
		}
	}
}

Limitations with Enumeration 
------------------------------
> Enumeration is used to read objects one by one from legacy collection objects. 
  Hence it is not a universal cursor.

> Using Enumeration we can perform read operation but not remove operation.

> To overcome this limitation Sun Micro System introduced Iterator.


2) Iterator
--------------
Iterator is an interface which is present in java.util package.

Iterator is used to read objects one by one from any Collection object. Hence it is a universal cursor.

Using Iterator we can perform read and remove operations.

We can create Iterator object as follow.
ex:
	Iterator itr=al.iterator();

Iterator interface contains following three methods.
ex:
	public boolean hasNext()
	public Object next()
	public void remove()

ex:
---
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		ArrayList al=new ArrayList();
		for(int i=1;i<=10;i++)
		{
			al.add(i);
		}
		System.out.println(al);//[1,2,3,4,5,6,7,8,9,10]

		Iterator itr=al.iterator();
		while(itr.hasNext())
		{
			Integer i = (Integer) itr.next();
			if(i%2==0)
			{
				System.out.println(i);
			}
			else
			{
				itr.remove();
			}
		}

		System.out.println(al);//[2,4,6,8,10]
	}
}

Limitations with Iterator
------------------------
Enumeration and Iterator we can read the objects only in forward directly but not in backward direction. Hence they are not bi-directional cursors.
 
Using Iterator we can perform read and remove operations but not adding and replacement of new objects.

To overcome this limitations Sun Micro System introduced ListIterator.



3) ListIterator 
------------------
ListIterator is a child interface of Iterator interface.

ListIterator is used to read objects one by one from List Collection objects.

Using ListIterator we can perform read, remove, adding and replacement of new objects.

We can create ListIterator object as follow.
ex:
	ListIterator litr=al.listIterator();

ListIterator interface contains following 9 methods.
ex:
	public boolean hasNext()
	public Object next()
	public int nextIndex()
	public int prevousIndex()
	public boolean hasPrevious()
	public Object previous()
	public void set(E)
	public void add(E)

ex:
---
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		ArrayList al=new ArrayList();
		al.add("bala");
		al.add("nag");
		al.add("chiru");
		al.add("venki");
		System.out.println(al); // [bala,nag,chiru,venki]

		ListIterator litr=al.listIterator();

		while(litr.hasNext())
		{
			String s = (String) litr.next();
			System.out.println(s);
		}
	}
}


ex:
---
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		ArrayList al=new ArrayList();
		al.add("bala");
		al.add("nag");
		al.add("chiru");
		al.add("venki");
		System.out.println(al); // [bala,nag,chiru,venki]

		ListIterator litr=al.listIterator();

		while(litr.hasNext())
		{
			String s = (String) litr.next();
			if(s.equals("chiru"))
			{
				litr.remove();
			}
		}

		System.out.println(al);//[bala,nag,venki]
	}
}

ex:
---
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		ArrayList al=new ArrayList();
		al.add("bala");
		al.add("nag");
		al.add("chiru");
		al.add("venki");
		System.out.println(al); // [bala,nag,chiru,venki]

		ListIterator litr=al.listIterator();

		while(litr.hasNext())
		{
			String s = (String) litr.next();
			if(s.equals("chiru"))
			{
				litr.add("ramcharan");
			}
		}

		System.out.println(al);//[bala,nag,chiru,ramcharan,venki]
	}
}


ex:
---
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		ArrayList al=new ArrayList();
		al.add("bala");
		al.add("nag");
		al.add("chiru");
		al.add("venki");
		System.out.println(al); // [bala,nag,chiru,venki]

		ListIterator litr=al.listIterator();

		while(litr.hasNext())
		{
			String s = (String) litr.next();
			if(s.equals("chiru"))
			{
				litr.set("ramcharan");
			}
		}

		System.out.println(al);//[bala,nag,ramcharan,venki]
	}
}

Q) How to add the employee objects in a List?


import java.util.*;
class Employee
{
	private int empId;
	private String empName;
	private double empSal;

	Employee(int empId,String empName,double empSal)
	{
		this.empId=empId;
		this.empName=empName;
		this.empSal=empSal;
	}

	public String toString()
	{
		return empId+" "+empName+" "+empSal;
	}
}
class Test  
{
	public static void main(String[] args) 
	{
		List<Employee> list=new ArrayList<Employee>();
		list.add(new Employee(101,"Alan",1000d));
		list.add(new Employee(102,"Jose",2000d));
		list.add(new Employee(103,"Mark",3000d));
		list.add(new Employee(104,"Jack",4000d));

		list.forEach(element -> System.out.println(element));
	}
}


































































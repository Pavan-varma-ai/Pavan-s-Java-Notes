                                                                                                                               31/12/2024

Abstract class
==============
Abstract class is a collection of zero or more abstract methods and concrete methods.

A abstract keyword is applicable for class and methods but not for variables.

It is not possible to create object for abstract class.

To write the implementation of abstract methods we will use sub classes.

By default every method is a public and abstract.

Abstract class contains only instance variables.

syntax:
-------
	abstract class <class_name>	
	{
		-
		- //abstract methods 
		- //concrete methods 
		- //instance variables 
		-
	}

If we know partial implementation then we need to use abstract class.

ex:
----
abstract class Animal
{
	//abstract method 
	public abstract void sound();
}
class Dog extends Animal
{
	@Override
	public void sound()
	{
		System.out.println("Bow Bow");
	}
}
class  Test 
{
	public static void main(String[] args) 
	{
		Dog d=new Dog();
		d.sound();
	}
}

ex:
----
abstract class Plan 
{
	//instance variable
	protected double rate;

	//abstract method 
	public abstract void getRate();

	//concrete method
	public void calculateBillAmt(int units)
	{
		System.out.println("Total units :"+units);
		System.out.println("Total Bill :"+(rate*units));
	}
}
class DomesticPlan extends Plan 
{
	@Override 
	public void getRate()
	{
		rate=2.5d;
	}
}
class CommercialPlan extends Plan
{
	@Override
	public void getRate()
	{
		rate=5.0d;
	}
}
class Test 
{
	public static void main(String[] args)
	{
		DomesticPlan dp=new DomesticPlan();
		dp.getRate();
		dp.calculateBillAmt(250);

		CommercialPlan cp=new CommercialPlan();
		cp.getRate();
		cp.calculateBillAmt(250);
	}
}

Q) What is the difference between interface and abstract class?

interface					abstract class
--------------					----------------
To declare interface we will use interface	To declare abstract class we will use abstract 
keyword.					keyword.

It is a collection of abstract methods,		It is a collection of abstract methods and 
default methods and static methods.		concrete methods.

It contains constants.				It contains instance variables.

We can achieve multiple inheritance.		We can't achieve multiple inheritance.

It does not allow constructors.			It allows constructors.

It does not allow blocks.			It allows blocks.

If we know only specification then we need to 	If we know partial implementation then we need 
use interface.					to use abstract class.


Singleton class
===============
It is one of the design pattern which allows to create only one instance of a class.

A class which allows us to create only one object is called singleton class.

We need to create singleton class when same object used multiple places.

To create a singleton class we required private constructor and static method.

ex:
---
class Singleton 
{
	static Singleton single=null;

	//private constructor
	private Singleton()
	{
	}

	//static method 
	public static Singleton getInstance()
	{
		if(single==null)
		{
			single = new Singleton();
		}

		return single;
	}
}

class Test 
{
	public static void main(String[] args)
	{
		Singleton s1=Singleton.getInstance();
		System.out.println(s1.hashCode());

		Singleton s2=Singleton.getInstance();
		System.out.println(s2.hashCode());
	}
}

Packages
==========
A package is a collection of classes, interfaces, enums and annotations.

Here enum is a special class and annotation is a special interface.

A package is also known as folder or a directory.

In java, packages are divided into two types.

1) Predefined packages 

2) Userdefined packages

1) Predefined packages 
-----------------------
Built-In packages are called predefined packages.
ex:
	java.lang
	java.io
	java.util
	java.time
	java.sql
	javax.servlet
	and etc.

2) Userdefined packages
-----------------------
Packages which are created by the user based on the application requirements are called userdefined packages.

syntax:
-------
	package  <package_name>;

It is always recommanded to declare package name in the reverse order of URL.

ex:
	com.google.www 
	com.qt.www 

ex:
---
package com.ihub.www;
import java.util.Calendar;
class Test 
{
	public static void main(String[] args)
	{
		Calendar c=Calendar.getInstance();

		int h = c.get(Calendar.HOUR_OF_DAY);

		if(h<12)
			System.out.println("Good Morning");
		else if(h<16)
			System.out.println("Good Afternoon");
		else if(h<20)
			System.out.println("Good Evening");
		else
			System.out.println("Good Night");
	}
}

We can compile above program as follow.
ex:
		current directory 
		     |
	javac   -d   .   Test.java
		|
	destination 
	folder 

We can execute above program as follow.
ex:
	java    com.ihub.www.Test 
			|
		packagename

Enum 
======
Enum concept introduced in Java 1.5 version.

Enum is a group of named constants.

Using enum we can create our own datatype called enumerated datatype.

When compare to old language enum, java enum is more powerful.

We can declare enum as follow.

syntax:
-------
	enum  <type_name>
	{
		value1,value2,value3,...,valueN	
	}
ex:
----
	enum Months 
	{
		JAN,FEB,MAR
	}

Internal implementation of enum
------------------------------
Every enum internally consider as class concept and it is extended with java.lang.Enum class.

Every enum constant is a reference variable of enum type.

ex:

enum Months 			final class Months extends java.lang.Enum
{				{
	JAN,FEB,MAR ==>			public static final Months JAN=new Months();
}					public static final Months FEB=new Months();
					public static final Months MAR=new Months();
				}


Declaration and Usage of enum 
-------------------------------
enum Months 
{
	JAN,FEB,MAR
}
class Test 
{
	public static void main(String[] args)
	{
		Months m = Months.JAN;

		System.out.println(m); // JAN
	}
}

ex:
---
enum Months 
{
	JAN,FEB,MAR
}
class Test 
{
	public static void main(String[] args)
	{
		Months m = Months.MAR;

		switch(m)
		{
			case JAN: System.out.println("January"); break;
			
			case FEB: System.out.println("February"); break;

			case MAR: System.out.println("March"); break;
		}
	}
}

java.lang.Enum class
--------------------
The power to enum will be inherited from java.lang.Enum class.

It contains following two methods.

1) values() 
----------
	It returns group of constants from enum.

2) ordinal() 
-----------
	It returns ordinal number.

ex:
---
enum Months 
{
	JAN,FEB,MAR
}
class Test 
{
	public static void main(String[] args)
	{
		Months[] m = Months.values();	

		//for each loop
		for(Months m1:m)
		{
			System.out.println(m1+" ---------- "+m1.ordinal());
		}
	}
}

When compare to old language enum , java enum is more powerful because in addition to constants we can declare variables, methods and constructors.

ex:
---
enum Drinks
{
	COLA, PEPSI, MAZAA;

	Drinks()
	{
		System.out.println("constructor");
	}
}
class Test
{
	public static void main(String[] args)
	{
		Drinks d = Drinks.PEPSI;
	}
}

ex:
---
enum Week 
{
	MON,TUE,WED,THU,FRI,SAT,SUN;

	static int i=10;

	public static void main(String[] args)
	{
		System.out.println(i);
	}
}






































                                                                                                    Date:07/12/2024

Q) Write a java program to convert CGPA to percentage?

import java.util.Scanner;
class Example9 
{
	public static void main(String[] args) 
	{
		Scanner sc=new Scanner(System.in);

		System.out.println("Enter the CGPA :");
		double cgpa=sc.nextDouble();

		double percentage = cgpa*9.5;

		System.out.println("CGPA to percentage is ="+percentage);
	}
}

Q) Write a java program to accept one salary then find out 10% of TDS from given salary?

import java.util.Scanner;
class Example10
{
	public static void main(String[] args) 
	{
		Scanner sc=new Scanner(System.in);

		System.out.println("Enter the salary :");
		int salary=sc.nextInt();

		double tds =(double)salary*10/100;

		System.out.println(tds);

	}
}

Q) 
Participant will cover 30% of the lane length and another partner will cover remaining length of lane. So print each participant covers distance in that race.
Input:
		Enter the length of the each lane: 100
		Enter the number of rounds: 4
		Enter the percentage of first participant to cover: 30
Output:
		First participant will cover 120 meters in a total race
		Second participant will cover 280 meters in a total race

ex:
---
import java.util.Scanner;
class Example11
{
	public static void main(String[] args) 
	{
		Scanner sc=new Scanner(System.in);

		System.out.println("Enter the length of the each lane :");
		int lane=sc.nextInt(); // 100 

		System.out.println("Enter the number of rounds :");
		int rounds=sc.nextInt(); // 4

		System.out.println("Enter the percentage of first participant to cover :");
		int firstParticipant=sc.nextInt(); //30

		int firstPercentage= lane * rounds * firstParticipant/100;

		int secondPercentage= lane * rounds - firstPercentage;

System.out.println("First participant will cover "+firstPercentage+" meters in a total race");
System.out.println("Second participant will cover "+secondPercentage+" meters in a total race");	
	}
}

Typecasting 
==========
The process of converting from one datatype to another datatype is called typecasting.

In java, typecasting can be done in two ways.

1) Implicit typecasting 

2) Explicit typecasting 

1) Implicit typecasting 
------------------------
If we want to store small value into a bigger variable then we need to implicit typecasting.

A compiler is resposible to perform implicit typecasting.

There is no possibility to loss the information.

It is also known as widening or upcasting.

We can perform implicit typecasting as follow.

ex:
	byte	-->	short
				-->	
					int -->	long	-->	float	-->	double
				-->
			char 

ex:
---
class Test
{
	public static void main(String[] args) 
	{
		byte b=10;
		
		int i=b;

		System.out.println(i);//10
	}
}


ex:
---
class Test
{
	public static void main(String[] args) 
	{
		char ch='a';

		long l=ch;

		System.out.println(l);//97
	}
}

ex:
---
class Test
{
	public static void main(String[] args) 
	{
		int i=10;

		double d=i;

		System.out.println(d);//10.0
	}
}

2) Explicit typecasting 
------------------------
If we want to store bigger value into a smaller variable then we need to use explicit tyecasting.

A programmer is responsible to perform explicit typecasting.

There is a possibility to loss the information.

It is also known as Narrowing or Downcasting.

We can perform explicit typecasting as follow.

ex:
	byte	<--	short
				<--	
					int <--	long	<--	float	<--	double
				<--
			char 

ex:
---
class Test
{
	public static void main(String[] args) 
	{
		double d=10.56;

		long l=(long)d;

		System.out.println(l);//10
	}
}

ex
---
class Test
{
	public static void main(String[] args) 
	{
		int i=65;

		char ch=(char)i;

		System.out.println(ch);//A 
	}
}

class Test
{
	public static void main(String[] args) 
	{
		int i=130;

		byte b=(byte)i;
		
		System.out.println(b);//-126
	}
}


Types of blocks in java
=======================
A block is a set of statements which is enclosed in a curly braces i.e {}.

In java, we have three types of blocks.

1) Instance block 

2) Static block 

3) Local block 


1) Instance block 
------------------
Instance block is used to initialize the instance variables.

Instance block must and should declare immediately after the class but not inside methods and constructors.

Instance block will execute when we create an object.

We can declare instance block as follow.

syntax:
-------
	//instance block
	{
		-
		- //set of statements
		-
	}

ex:
----
class Test
{
	//instance block
	{
		System.out.println("instance-block");
	}

	public static void main(String[] args) 
	{
		System.out.println("main-method");	
	}
}
o/p:
	main-method 

ex:
----
class Test
{
	//instance block
	{
		System.out.println("instance-block");
	}

	public static void main(String[] args) 
	{
		System.out.println("main-method");	
		Test t=new Test();
	}
}
o/p:
	main-method
	instance-block 
ex:
----
class Test
{
	//instance block
	{
		System.out.println("instance-block");
	}

	public static void main(String[] args) 
	{
		Test t1=new Test();
		System.out.println("main-method");	
		Test t2=new Test();
	}
}

ex:
---
class Test
{
	//instance variable 
	int i;

	//instance block
	{
		i=100;
	}

	
	public static void main(String[] args) 
	{
		Test t=new Test();
		System.out.println(t.i);//100
	}
}






































































































































                                                                                                                         20/01/2025

Generics 
=========
Arrays are typesafe. It means we can give guarantee that what type of elements are present in array.

If requirement is there to store String values then it is recommanded to use String[] array.
ex:
	String[] sarr=new String[10];
	sarr[0]="hi";
	sarr[1]="bye";
	sarr[2]=10;  //invalid

At the time of retrieving the data from array we don't need to perform typecasting.
ex:
	String[] sarr=new String[10];
	sarr[0]="hi";
	sarr[1]="bye";
	-
	-
	String val=sarr[0];

Collections are not typesafe. It means we can't provide guarantee that what type of elements are present in Collections.

If requirement is there to store String values then it is never recommanded to use ArrayList because we won't get any compile time error or runtime error but sometimes our program get failure.

ex:
	ArrayList al=new ArrayList();
	al.add("hi");
	al.add("bye");
	al.add(10);

At the time of retrieving the data compulsary we need to perform typecasting.
ex:
	ArrayList al=new ArrayList();
	al.add("hi");
	al.add("bye");
	al.add(10);
	-
	-
	String val=(String)al.get(0);

To overcome this limitation Sun Micro System introduced Generics concept in 1.5 version.

The main objective of generics are 

1) To make collections as typesafe 

2) To avoid typecasting problem


java.util package
=================

Q) What is the difference between Arrays and Collections ? 

Arrays						Collections 
------------					--------------
It is a collection of homogeneous data 		It is a collection of homogeneous and hetrogeneous 
elements.					data elements.

It is fixed in size.				It is growable in nature.

Performance point of view arrays are 		Memory point of view Collections are recommanded 
recommanded to use.				to use.

Arrays not implemented based on data structure 	Collections are implemented based on data structure 
concept so we can't expect any readymade 	concept so we can expect ready made methods.
methods.

It can hold primitive types and object types.	It can hold only object types.


Collection Framework
===================
Collection framework defines several utility classes and interfaces to represent group of individual objects in a single entity.



Collection 
============
Collection is an interface which is present in java.util package.

Collection is a root interface for entire Collection framework.

If we want to represent group of individual objects in a single entity then we need to use Collection interface.

Collection interface contains following methods which are available for entire Collection objects.

ex:

  cmd> javap   java.util.Collection 


  public abstract int size();
  public abstract boolean isEmpty();
  public abstract boolean contains(java.lang.Object);
  public abstract java.util.Iterator<E> iterator();
  public abstract java.lang.Object[] toArray();
  public abstract <T> T[] toArray(T[]);
  public default <T> T[] toArray(java.util.function.IntFunction<T[]>);
  public abstract boolean add(E);
  public abstract boolean remove(java.lang.Object);
  public abstract boolean containsAll(java.util.Collection<?>);
  public abstract boolean addAll(java.util.Collection<? extends E>);
  public abstract boolean removeAll(java.util.Collection<?>);
  public default boolean removeIf(java.util.function.Predicate<? super E>);
  public abstract boolean retainAll(java.util.Collection<?>);
  and etc.


List
=====
It is a child interface of Collection interface.

If we want to represent group of individual objects in a single entity where duplicate objects are allowed and order is preserved then we need to use List interface.

Diagram: class42.1


ArrayList 
-----------
The underlying data structure is resizable array or growable array.

Duplicate objects are allowed.

Insertion order is preserved.

Hetrogeneous objects are allowed.

Null insertion is possible. 

It implements Serializable, Cloneable and RandomAccess interface.

If our frequently operation is a retrieval operation then ArrayList is a best choice.

ex:
---
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		ArrayList al=new ArrayList();
		al.add("one");
		al.add("two");
		al.add("three");
		System.out.println(al);//[one,two,three]

		al.add("one");
		System.out.println(al);//[one,two,three,one]

		al.add(10);
		System.out.println(al);//[one,two,three,one,10]

		al.add(null);
		System.out.println(al);//[one,two,three,one,10,null]
	}
}


ex:
---
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		ArrayList<String> al=new ArrayList<String>();
		al.add("one");
		al.add("two");
		al.add("three");
		System.out.println(al);//[one,two,three]

		al.add("one");
		System.out.println(al);//[one,two,three,one]

		al.add(null);
		System.out.println(al);//[one,two,three,one,null]
	}
}

ex:
---
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		ArrayList<String> al=new ArrayList<String>();
		al.add("one");
		al.add("two");
		al.add("three");
		

		for(int i=0;i<al.size();i++)
		{
			System.out.println(al.get(i));
		}
	}
}

ex:
---
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		ArrayList<String> al=new ArrayList<String>();
		al.add("one");
		al.add("two");
		al.add("three");
		
		System.out.println(al.isEmpty()); // false 

		al.add(1,"raja");
		System.out.println(al); // [one,raja,two,three]

		System.out.println(al.contains("raja")); // true 

		al.remove("raja");
		System.out.println(al);//[one, two, three]

		al.clear();
		System.out.println(al);//[]
	}
}












































































                                                                                                                            24/12/2024

OOPS 
=====
OOPS stands for Object Oriented Programming System/Structure.

OOPS introduced to deal with real world entities using programming language.

A language is said to be object oriented if it supports following features.

ex:
	class 
	object 
	Abstraction 
	Encapsulation 
	Inheritance  and 
	Polymorphism


class 
=======
It is a blue print of an object.

It is a collection of objects.

It is a logical entity.

A class will accept following modifiers.
ex:
	default 
	public 
	final 
	abstract 

We can declare a class as follow.

syntax:
-------
	optional 
	|
	Modifier class class_name <extends> Parent_classname
				  <implements> interface_name
	{

	}


object 
=======
It is a outcome of a blueprint.

It is a instance of a class.
Here instance means allocating memory for our data members.

It is a collection of properties and behaviours.

ex:
			dog (object)
			|
	---------------------------------
	|				|
properties				behaviours 

> Name 					> Barking 
> Age 					> Eating 
> Color					> Sleeping 
> Breed 				and etc.
> Weight 
and etc.

It is a physical entity.

It is possible to create more then one object in a single class.

We can create an object as follow.

syntax:
	class_name  reference_variable=new constructor();
ex:
	Test t=new Test();

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		Test t1=new Test();
		Test t2=new Test();
		
		System.out.println(t1.hashCode());
		System.out.println(t2.hashCode());

		System.out.println(t1.toString());//Test@Hexadecimal 
		System.out.println(t2.toString());
	}
}

Q) What is the difference between class and object?

class						object
---------					----------
To declare a class we will use class keyword.	To declare an object we will use new keyword.

It is a blue print of an object.		It is a outcome of a blue print.

It is a collection of objects.			It is a collection of properties & behaviours.

It is a logical entity.				It is a physical entity.

It does not allocate memory.			It alloctes memory.

It can't be modified.				It can be modified.

It is declared once.				It is declared multiple times.	


Q) What is hash code in java?

For every object JVM will create a unique identification i.e hash code.

In order to read the hash code of an object we need to use hashCode() method of Object class.

Diagram: class27.1

ex:
---
import java.util.Date;
class Test  
{
	public static void main(String[] args) 
	{
		Test t=new Test();
		System.out.println(t.hashCode());

		Date d=new Date();
		System.out.println(d.hashCode());

	}
}




Q) What is toString() method in java?

A toString() method present in Object class.

Whenever we are trying to display any object reference directly or indirectly toString() method will be executed.

ex:
---

class Test  
{
	public static void main(String[] args) 
	{
		Test t=new Test();
		System.out.println(t.toString());//Test@Hexadecimal

		int[] arr=new int[3];
		System.out.println(arr);//[I@hexadecimal

	}
}


Q) What is the difference between default class and public class?

default	class					public class
----------					-------------
To declare a default class we should not use 	To declare a public class we should use 
any keyword.					public keyword.
ex:						ex:
	class A 					public class A 
	{						{
	
	}						}

If we declare any class as default then we can	If we declare any class as public then we 
access that class within the package.		can access that class within the package and 
						outside the package.



Q) What is the difference between final class and abstract class?

final class					abstract class
----------					--------------
To declare final class we should use final	To declare abstract class we should use 
keyword.					abstract keyword.
ex:						ex:
	final class A 					abstract class A 
	{						{
	}						}

Child creation is not possible.			Child creation is possible.

Object creation is possible.			Object creation is not possible.



Data Hiding 
===========
Data hiding is a programming technique that hides object data from outside class.

Using private modifier we an achieve data hiding concept.

The main objective of data hiding is to provide security.

ex:
---
class Account 
{
	private double balance=10000d;
}
class Student 
{
	public static void main(String[] args) 
	{
		Account account=new Account();
		System.out.println(account.balance);
	}
}
o/p:
	C.T.E : balance has private access in Account



Abstraction
===========
Hiding internal implementation and highlighting the set of services is called abstraction.

Using abstract classes and interfaces we can implements abstraction.

The best example of abstraction is GUI ATM machine where bank people will hide internal implementation and highlights the set of services like banking, withdrawl, mini statement and etc.

The main advantages of abstraction are.

1) It gives security because it hide internal implementation from the outsider.

2) Enhacement becomes more easy because without effecting enduser they can perform any 
  changes in our internal system.

3) It provides flexibility to the enduser to use the system.

4) It improves maintainability of an application.


Encapsulation 
==============
The process of encapsulating or grouping or binding variables and it's associate methods in a single entity is called encapsulation.

Abstraction is used to hide the data and encapsulation is used to protect the data.

Enapsulation concept introduced by seeing capsule.

Diagram: class27.2

A class is said to be encapsulated class if it supports data hiding and abstraction.

In encapsulation for every variable we need to write setter and getter methods.


























































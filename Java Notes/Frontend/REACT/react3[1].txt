
                                                                                   08/02/2025
React Project Structure
========================
myapp1
|
|---node_modules 
|
|---public
|	|
	|---index.html (main template)
	|---favicon.ico
	|---manifest.json

|-----src
|	|
	|---index.js  (entry point)
	|---index.css
	|
	|---App.js  (parent component)
	|---App.css
	|---App.test.js 
|
|---package.json
|---READMD.md 

> "myapp1" is a react project/application name.

> "node_modules" contains dependencies and packages.

> "index.html" is a main template.

> "favicon.ico" is a favorite icon.

> "manifest.json" file contains metadata that is used when client install the application in 
   customer computer or laptop. 

> "index.js" is a entry point in react.

> "index.css" is related to index.js and it is global.

> "App.js" is a parent component.

> "App.css" is related to App.js and it is global.

> "App.test.js" is used to perform unit testing in react.

> "package.json" contains all project dependencies along with versions.




Second Application Development in React
========================================
myapp2
|
|---node_modules 
|
|---public
|	|
	|---index.html (main template)
	|---favicon.ico
	|---manifest.json

|-----src
|	|
	|---index.js  (entry point)
	|---index.css
	|
	|---App.js  (parent component)
	|---App.css
	|---App.test.js 
|
|---package.json
|---READMD.md 

step1:
------
	create a react application i.e myapp2.
	ex:
		reactprojects> npx  create-react-app myapp2 

step2:
------
	Open the VSC Editor.
	ex:
		reactprojects> code  . 

step3:
-----
	Switch to the project.
	ex:
		reactprojects> cd   myapp2 

step4:
------
	Install web-vitals by using npm command.
	ex:
		reactprojects/myapp2> npm install web-vitals

step5:
------
	Run the react application.
	ex:
		reactprojects/myapp2> npm start 

step6:
------
	Test the application by using below request url.
	ex:
		http://localhost:3000/

step7:
-----
	Add the logic inside App.js file.

App.js 
-------

function App()
{
  return (
    <h1>Welcome to React Second Application</h1>
  )
}
export default App;


step8:
------
	Goto to index.js file and call App.js component for multiple times.

index.js
---------
import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';
import reportWebVitals from './reportWebVitals';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <App />
    <App />
    <App />
  </React.StrictMode>
);

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();



React Fragment 
===============
By default every react component can run only one element at a time.

To return more then one element in a single react component we need to react fragment.

React Fragment is a feature in React that allows us to declare multiple elements in react component without adding extra node to the DOM.


Project structure 
-----------------
myapp3
|
|---node_modules 
|
|---public
|	|
	|---index.html (main template)
	|---favicon.ico
	|---manifest.json

|-----src
|	|
	|---index.js  (entry point)
	|---index.css
	|
	|---App.js  (parent component)
	|---App.css
	|---App.test.js 
|
|---package.json
|---READMD.md 

step1:
------
	create a react application i.e myapp3.
	ex:
		reactprojects> npx  create-react-app myapp3 

step2:
------
	Open the VSC Editor.
	ex:
		reactprojects> code  . 

step3:
-----
	Switch to the project.
	ex:
		reactprojects> cd   myapp3

step4:
------
	Install web-vitals by using npm command.
	ex:
		reactprojects/myapp3> npm install web-vitals

step5:
------
	Run the react application.
	ex:
		reactprojects/myapp3> npm start 

step6:
------
	Test the application by using below request url.
	ex:
		http://localhost:3000/

step7:
-----
	Add the logic inside App.js file.

App.js 
--------

function App()
{
  return(
    <div>
        <h1> Welcome to QualityThought </h1>
        <h1> This is Niyaz Sir class </h1>
    </div>
  )
}
export default App;

Note : 
------
Here <div> is a extra node to the DOM.
Adding extra node to the DOM is costly to the company.


App.js 
--------
import React from 'react';

function App()
{
  return(
    <React.Fragment>
        <h1> Welcome to QualityThought </h1>
        <h1> Today is Niyaz Sir class </h1>
    </React.Fragment>
  )
}
export default App;


App.js 
-------
import {Fragment} from 'react';

function App()
{
  return(
    <Fragment>
        <h1> Welcome to QualityThought </h1>
        <h1> This is Niyaz Sir class </h1>
    </Fragment>
  )
}
export default App;


App.js
------
function App()
{
  return(
    <>
        <h1> Welcome to QualityThought </h1>
        <h1> Niyaz Sir class </h1>
    </>
  )
}
export default App;






















                                                                                                                              27/12/2024


Method Hiding 
==============
Method hiding is exactly same as method overriding with following differences.

Method overriding 				Method hiding 
------------------				---------------
All methods present in method overriding	All methods present in method hiding  
must be non-static.				must be static.

Method resolution will taken care by		Method resolution will taken care by a 
a JVM based on runtime object.			compiler based on reference type.

Method overriding is also known as 		Method hiding is also known as 
Runtime polymorphism, Dynamic polymorphism,	compile time polymorphism, static polymorphism,
late binding.					early binding.

ex:
---
class Parent 
{
	public static void property()
	{
		System.out.println("House+Land+Gold");
	}
	public static void marry()
	{
		System.out.println("Rashmika");
	}
}
class Child extends Parent 
{
	public static void marry()
	{
		System.out.println("Trisha");
	}
}
class Test  
{
	public static void main(String[] args) 
	{
		Parent p=new Parent();
		p.property();//House+Land+Gold
		p.marry();// Rashmika

		Child c=new Child();
		c.property();//House+Land+Gold
		c.marry();// Trisha

		Parent p1=new Child();
		p1.property(); // House+Land+Gold
		p1.marry(); // Rashmika
	}
}

Q) Can we override main method in java?

No, we can't override main method in java because it is static.

Polymorphism
=============
Polymorphism has taken from Greek word.

Here poly means many and morphism means forms.

The ability to represent in different forms is called polymorphism.

The main objective of polymorphism is to provide flexibility.

Diagram: class30.1

In java, polymorphism is divided into two types.

1) Compile time polymorphism / Static polymorphism / Early binding 

2) Runtime polymorphism / Dynamic polymorphism / Late binding 

1) Compile time polymorphism
-----------------------------
A polymorphism which exhibits at compile time is called compile time polymorphism.
ex:
	Method overloading 
	Method hiding 

2) Runtime polymorphism
-------------------------
A polymorphism which exhibits at runtime is called runtime polymorphism.
ex:
	Method overriding 

Diagram: class30.2


Constructor 
============
It is a special method which is used to initialized an object.

Having same name as class name is called constructor.

It is executed when object is created.

It does not allow any returntype.

It will accept following modifiers.
ex:
	default 
	public 
	private 
	protected 

In java ,  constructors are divided into two types.

1) Userdefined constructor

2) Default constructor 

1) Userdefined constructor
---------------------------
A constructor which is created by the user based on the application requirement is called userdefined constructor.

It is classified into two types.

i) Zero-Argument constructor 

ii) Parameterized constructor 

i) Zero-Argument constructor 
-----------------------------
Suppose if we are passing not passing any argument to userdefined constructor then that constructor is called zero argument constructor.

ex:
---

class Test  
{
	Test()
	{
		System.out.println("constructor");
	}
	public static void main(String[] args) 
	{
		System.out.println("main-method");
	}
}

o/p:
	main-method

ex:
---

class Test  
{
	public Test()
	{
		System.out.println("constructor");
	}
	public static void main(String[] args) 
	{
		System.out.println("main-method");
		Test t=new Test();
	}
}

o/p:
	main-method 
	constructor 

ex:
---

class Test  
{
	private Test()
	{
		System.out.println("constructor");
	}
	public static void main(String[] args) 
	{
		Test t1=new Test();
		System.out.println("main-method");
		Test t2=new Test();
	}
}
o/p:
	constructor 
	main-method 
	constructor 

ex:
---

class Test  
{
	protected Test()
	{
		System.out.println("constructor");
	}
	public static void main(String[] args) 
	{
		Test t1=new Test();
		System.out.println("main-method");
		Test t2=new Test();
	}
}
o/p:
	constructor 
	main-method 
	constructor 

ii) Parameterized constructor 
-----------------------------
Suppose if we are passing atleast one argument to userdefined constructor then that constructor is called parameterized constructor.

ex:
---
class Employee 
{
	//current class variables 
	private int empId;
	private String empName;
	private double empSal;

	Employee(int empId,String empName,double empSal)
	{
		this.empId=empId;
		this.empName=empName;
		this.empSal=empSal;
	}

	public void getEmployeeDetails()
	{
		System.out.println("Employee Id :"+empId);
		System.out.println("Employee Name :"+empName);
		System.out.println("Employee Salary :"+empSal);
	}
}
class Test  
{
	public static void main(String[] args) 
	{
		Employee e=new Employee(101,"Alan",1000d);
		e.getEmployeeDetails();
	}
}

2) Default constructor 
--------------------
It is a compiler generated constructor for every java program where we are not defining atleast zero argument constructor.

To see the default constructor we need to use below command.
ex:
	javap   -c   Test 


Diagram: class30.3








































































































                                                                                                               22/01/2025

HashSet 
========
The underlying data structure is Hashtable.

Duplicate objects are not allowed.

Insertion order is not preserved because it takes hash code of an object.

Hetrogeneous objects are allowed.

Null insertion is possible. 

ex:
---
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		HashSet hs=new HashSet();
		hs.add("one");
		hs.add("nine");
		hs.add("five");
		hs.add("eight");
		System.out.println(hs); // [nine, one, five, eight]

		hs.add("one");
		System.out.println(hs); // [nine, one, five, eight]

		hs.add(10);
		System.out.println(hs); // [nine, one, 10, five, eight]

		hs.add(null);
		System.out.println(hs); // [null, nine, one, 10, five, eight]
	}
}


LinkedHashSet 
==============
LinkedHashSet is a child class of HashSet class.

LinkedHashSet is exactly same as HashSet class with following differences.

HashSet						LinkedHashSet 
----------------				-----------------
The underlying data structure is Hashtable.	The underlying data structure is Hashtable and  
						LinkedList.

Insertion order is not preserved.		Insertion order is preserved.

It is introduced in 1.2v.			It is introduced in 1.4v.
				
ex:
---
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		LinkedHashSet lhs=new LinkedHashSet();
		lhs.add("one");
		lhs.add("nine");
		lhs.add("five");
		lhs.add("eight");
		System.out.println(lhs); // [one,nine,five,eight]

		lhs.add("one");
		System.out.println(lhs); // [one,nine,five,eight]

		lhs.add(10);
		System.out.println(lhs); // [one,nine,five,eight,10]

		lhs.add(null);
		System.out.println(lhs); // [one,nine,five,eight,10,null]
	}
}

TreeSet 
========
The underlying data structure is Balanced Tree.

Duplicate objects are not allowed.

Insertion order is not preserved because it takes sorting order of hash code.

Hetrogeneous objects are not allowed . If we try to insert then we will get ClassCastException.

Null insertion is not possible. If we try to insert then we will get NullPointerException.

ex:
---
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		TreeSet ts=new TreeSet();
		ts.add(5);
		ts.add(10);
		ts.add(3);
		ts.add(1);
		System.out.println(ts); //[1,3,5,10]

		ts.add(1);
		System.out.println(ts); //[1,3,5,10]

		//ts.add("one");
		//System.out.println(ts); // R.E : ClassCastException

		//ts.add(null);
		//System.out.println(ts); // R.E : NullPointerException
	}
}



Q) Write a java program to display distinct elements from given array?

input:
	1 2 2 3 3 3 4 4 4 4

output:
	1 2 3 4 


import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		int[] arr={1,2,2,3,3,3,4,4,4,4};

		Set<Integer> set=new LinkedHashSet<Integer>();

		//for each loop 
		for(int i:arr)
		{
			set.add(i);
		}

		set.forEach(element -> System.out.print(element+" "));
	}
}


Q) What is the difference between Comparable and Comparator interface?

Comparable 
------------
Comparable is an interface which is present in java.lang package.

Comparable interface contains only one method i.e compareTo() method.

ex:
	obj1.compareTo(obj2)

	It returns -ve if obj1 comes before obj2 
	It returns +ve if obj1 comes after obj2
	It returns 0 if both objects are same

If we depend upon default natural sorting order then we need to use Comparable interface.

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		System.out.println("A".compareTo("Z")); // -25

		System.out.println("Z".compareTo("A")); // 25

		System.out.println("K".compareTo("K")); // 0
	}
}

Comparator
-------------
Comparator is an interface which is present in java.util package.

Comparator interface contains following two methods i.e compare() and equals() method.

	public int compare(Object obj1,Object obj2)
	
	It returns +ve if obj1 comes before obj2
	It returns -ve if obj1 comes after obj2
	It returns 0 if both objects are same	

If we depend upon customized sorting order then we need to use Comparator interface.

Implementation of equals() method is optional because this method is present in Object class which is available to the class through inheritance.

ex:
---
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		TreeSet<Integer> ts=new TreeSet<Integer>(new MyComparator());
		ts.add(10);
		ts.add(1);
		ts.add(5);
		ts.add(7);
		System.out.println(ts); //[10, 7, 5, 1]
	}
}
class MyComparator implements Comparator
{
	public int compare(Object obj1,Object obj2)
	{
		Integer i1=(Integer)obj1;
		Integer i2=(Integer)obj2;

		if(i1<i2)
			return 1;
		else if(i1>i2)
			return -1;
		else 
			return 0;
	}
}

ex:
---
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		TreeSet<Integer> ts=new TreeSet<Integer>(new MyComparator());
		ts.add(10);
		ts.add(1);
		ts.add(5);
		ts.add(7);
		System.out.println(ts); //[1, 5, 7, 10]
	}
}
class MyComparator implements Comparator
{
	public int compare(Object obj1,Object obj2)
	{
		Integer i1=(Integer)obj1;
		Integer i2=(Integer)obj2;

		if(i1<i2)
			return -1;
		else if(i1>i2)
			return 1;
		else 
			return 0;
	}
}


Map 
=====
It is not a child interface of Collection interface.

If we want to represent group of individual objects in key,value pair then we need to use Map interface.

Key and value both must be objects.

key can't be duplicate but value can be duplicate.

Each key and value pair is known as one-entry.

Diagram: class44.1



HashMap 
---------
The underlying data structure is Hashtable.

Duplicate keys are not allowed but values can be duplicate.

Insertion order is not preserved because it takes hash code of the key.

Hetrogeneous objects are allowed for both key and value.

Null insertion is possible for both key and value.

ex:
---
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		HashMap hm=new HashMap();
		hm.put("one","raja");
		hm.put("eight","erick");
		hm.put("five","jose");
		hm.put("two","alan");
		System.out.println(hm); //{one=raja, five=jose, two=alan, eight=erick}

		hm.put("one","gogo");
		System.out.println(hm); // {one=gogo, five=jose, two=alan, eight=erick}

		hm.put(1,100);
		System.out.println(hm);//{1=100, one=gogo, five=jose, two=alan, eight=erick}

		hm.put(null,null);
		System.out.println(hm);//{null=null, 1=100, one=gogo, five=jose, two=alan, eight=erick}
	}
}

LinkedHashMap
=============
It is a child class of HashMap class.

LinkedHashMap is exactly same HashMap class with following differences.

HashMap						LinkedHashMap 
-----------					----------------
The underlying data structure is Hashtable.	The underlying data structure is Hashtable and 
						LinkedList.

Insertion order is not preserved.		Insertion order is preserved.	

It is introduced in 1.2v.			It is introduced in 1.4v.

ex:
---
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		LinkedHashMap lhm=new LinkedHashMap();
		lhm.put("one","raja");
		lhm.put("eight","erick");
		lhm.put("five","jose");
		lhm.put("two","alan");
		System.out.println(lhm); //{one=raja,eight=eric,five=jose,two=alan}

		lhm.put("one","gogo");
		System.out.println(lhm); //{one=gogo,eight=eric,five=jose,two=alan}

		lhm.put(1,100);
		System.out.println(lhm);//{one=raja,eight=eric,five=jose,two=alan,1=100}

		lhm.put(null,null);
		System.out.println(lhm);//{one=raja,eight=eric,five=jose,two=alan,1=100,null=null}
	}
}

ex:
---
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		Map<String,String> map=new LinkedHashMap<String,String>();
		map.put("one","raja");
		map.put("eight","erick");
		map.put("five","jose");
		map.put("two","alan");
		
		Set s = map.keySet();
		System.out.println(s);//[one, eight, five, two]

		Collection c=map.values();
		System.out.println(c); //[raja, erick, jose, alan]

		Set s1=map.entrySet();
		System.out.println(s1);//[one=raja, eight=erick, five=jose, two=alan]
	}
}










































                                                                                                                Date: 10/12/2024


How to convert decimal number to binary number
==============================================

	10 - decimal number 
	1010 - binary number 

	2|10
	 ---- 0 
	2|5
	 ---- 1 
	2|2		^
	 ---- 0 	|
	  1		|
	-----------------
	1010


How to convert binary number to decimal number
=============================================

	binary number : 1010
	decimal number : 10 

	0*1 + 1*2 + 0*4 +  1*8 

	0 + 2 + 0 + 8 = 10


4) Bitwise operators 
=====================

i) Bitwise AND operator (&)
---------------------------
Bitwise AND operator deals with binary numbers.

Truth table 
------------
T	T	= T
T	F	= F 
F	T	= F 
F	F	= F 

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		int a=10,b=15;

		int c = a & b;

		System.out.println(c); //10
	}
}
/*
	10 - 1010
	15 - 1111
	----------
	&  - 1010  <--

	0*1 + 1*2 + 0*4 +  1*8 

	0 + 2 + 0 + 8 = 10
*/

ex:
----
class Test  
{
	public static void main(String[] args) 
	{
		int a=10,b=5;

		int c = a & b;

		System.out.println(c); //0
	}
}
/*
	10 - 1010
	5  - 0101
	----------
	&  - 0000
*/

ii)Bitwise OR operator (|) 
-----------------------
Bitwise OR operator deals with binary numbers.

Truth table
-----------
T	T	= T
T	F	= T
F	T	= T
F	F	= F 

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		int a=10,b=5;

		int c = a | b;

		System.out.println(c); //15
	}
}
/*
	10 - 1010
	5  - 0101
	----------
	|  - 1111
*/

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		int a=2,b=3;

		int c = a | b;

		System.out.println(c); //3
	}
}
/*
	2 - 0010
	3 - 0011
	--------
	| - 0011
*/

iii) Bitwise XOR operator (^)
-------------------------------
Bitwise XOR operator deals with binary numbers.

Truth table
-----------
T	T	= F 
T	F	= T
F	T	= T
F	F	= F 

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		int a=10,b=15;

		int c = a ^ b;

		System.out.println(c); // 5 
	}
}
/*
	10 - 1010
	15 - 1111
	----------
	^  - 0101 <---

	1*1 + 0*2 + 1*4 + 0*8 

	 1 + 0 + 4 + 0 = 5
*/

iv) Bitwise NOT operator (~)
----------------------------
ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		int i=~10;

		System.out.println(i); //-11
	}
}

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		int i=~78;

		System.out.println(i); //-79
	}
}

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		int i=~(-9);

		System.out.println(i); //8
	}
}

Q) Write a java program to check given number is even or odd?


import java.util.Scanner;
class Test  
{
	public static void main(String[] args) 
	{
		Scanner sc=new Scanner(System.in);

		System.out.println("Enter the number :");
		int n=sc.nextInt();

		String result = ((n&1)==0)?"It is even number":"it is odd number";

		System.out.println(result);
	}
}



5) Arithmetic operators 
========================
% - modules 
/ - division 
* - multiplication 
+ - addition 
- - subtraction 

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		int i = 5+10%2+8/3+9*6+6/10+4%20+8-20;
		
		System.out.println(i);
	}
}
/*
	5 + 10%2 + 8/3 + 9*6 + 6/10 + 4%20 + 8 - 20

	5 +  0   +  2 + 54  +  0 + 4  + 8 - 20 

	19 + 54 - 20 

	73 - 20 = 53
*/

Assignment operators 
=====================
=
%=
/=
*=
+=
-=

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		int i=10;

		i+=5; // i = i + 5;

		System.out.println(i); //15

	}
}

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		int i=10;

		i%=6; // i = i % 6;

		System.out.println(i); //4

	}
}

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		int i=10;

		i/=10;

		System.out.println(i); // 1

	}
}

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		int i=10;

		i/=20;

		System.out.println(i); // 0

	}
}

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		int i=10;

		i-=4;

		System.out.println(i); // 6

	}
}

ex:
-----
class Test  
{
	public static void main(String[] args) 
	{
		int i=10;

		i*=2;

		System.out.println(i); // 20

	}
}

6) Relational operators 
=======================

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		System.out.println(10 > 20); // false 

		System.out.println(10 < 20); // true 

		System.out.println(10 >= 5); // true 

		System.out.println(10 <= 10); // true 

	}
}

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		System.out.println(10 == 10); // true 

		System.out.println(10 == 20); // false 

		System.out.println(10 != 20); // true 

		System.out.println(10 != 10); // false 

	}
}

7) Shift operators 
===================

i) Right shift operator (>>)
---------------------------
10 >> 1 = 10/2 

10 >> 2 = 10/4

10 >> 3 = 10/8

10 >> 4 = 10/16

and etc.

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		int i=20 >> 3;

		System.out.println(i); // 20 / 8(2*2*2) = 2
	}
}

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		int i=100 >> 4;

		System.out.println(i); // 100 / 16 (2*2*2*2) = 6
	}
}

i) Left shift operator (<<)
---------------------------
10 << 1 = 10*2 

10 << 2 = 10*4

10 << 3 = 10*8

10 << 4 = 10*16

and etc.

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		int i= 10 << 3;

		System.out.println(i); // 10 * 8 (2*2*2) = 80
	}
}

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		int i= 100 << 5;

		System.out.println(i); //100 * 32 (2*2*2*2*2) = 3200
	}
}

8) Unary operators
===================

Increment/Decrement operators 
-----------------------------
We have two types of increment operators.

1) post-increment 
	ex:
		i++;

2) pre-increment 
	ex:
		++i;

We have two types of decrement operators.

1) Post-decrement 
	ex:
		i--;

2) Pre-decrement 
	ex:
		--i;
	

Post increment/decrement operator 
---------------------------------
Rule1: First Take 

Rule2: Then Change 

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		int i=10;

		i++;

		System.out.println(i);  // 11
	}
}

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		int i=10;

		System.out.println(i++);  //10
	}
}

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		int i=10;

		int j= i++ + i--;

		System.out.println(i+" "+j);//10  21
	}
}

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		int i=10;

		int j= i++ + i++ + i++; // 10 + 11 + 12

		System.out.println(i+" "+j);// 13  33
	}
}

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		int i=10;

		int j=i-- + i-- + i++; //10 +  9 + 8 

		System.out.println(i+" "+j);//9  27
	}
}

Pre increment/decrement operator 
---------------------------------
Rule1: First Change

Rule2: Then Take

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		int i=10;

		++i;

		System.out.println(i);//11
	}
}
 
ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		int i=10;

		System.out.println(++i);// 11
	}
}


ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		int i=10;

		int j=++i;

		System.out.println(i+" "+j);//11 11
	}
}


ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		int i=10;

		int j=++i +  --i;

		System.out.println(i+" "+j);//10  21
	}
}


ex;
---
class Test  
{
	public static void main(String[] args) 
	{
		int i=10;

		int j=++i + ++i + ++i;//11  12  13

		System.out.println(i+" "+j);//13  36 
	}
}


ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		int i=10;

		System.out.println(i++ + ++i);//10 + 12
	}
}

ex;
---
class Test  
{
	public static void main(String[] args) 
	{
		byte b=127;

		b++;

		System.out.println(b);//-128
	}
}

ex;
---
class Test  
{
	public static void main(String[] args) 
	{
		int i=100;

		100++;

		System.out.println(i);//C.T.E 
	}
}

ex:
--
class Test  
{
	public static void main(String[] args) 
	{
		int i=10;

		System.out.println((++i)++);// C.T.E  
	}
}















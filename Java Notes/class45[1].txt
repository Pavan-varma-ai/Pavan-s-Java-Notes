                                                                                                            23/01/2025

TreeMap 
=======
The underlying data structure is RED BLACK TREE.

Duplicate keys are not allowed but values can be duplicated.

Insertion order is not preserved because it takes sorting order of the key.

If we depend upon default natural sorting order then key can be homogenous and Comparable.

If we depend upon customized sorting order then key can be hetrogeneous and Non-comparable.

Key can't be null but value can be null. 

ex:
---
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		TreeMap<Integer,String> tm=new TreeMap<Integer,String>();
		tm.put(5,"five");
		tm.put(1,"one");
		tm.put(10,"ten");
		System.out.println(tm); //{1=one, 5=five, 10=ten}

		tm.put(1,"gogo");
		System.out.println(tm);//{1=gogo, 5=five, 10=ten}

		tm.put(6,null);
		System.out.println(tm);//{1=gogo, 5=five, 6=null, 10=ten}

		tm.put(null,"six");
		System.out.println(tm);// R.E .NullPointerException
	}
}

Hashtable 
===========
The underlying data structure is Hashtable.

Duplicate keys are not allowed but values can be duplicate.

Insertion order is not preserved because it takes descending order of the key.

Both key and value can be hetrogeneous.

Null insertion is not possible for both key and value.

ex:
----
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		Hashtable<Integer,String> ht=new Hashtable<Integer,String>();
		ht.put(5,"five");
		ht.put(1,"one");
		ht.put(10,"ten");
		System.out.println(ht);// {10=ten, 5=five, 1=one}

		ht.put(10,"alan");
		System.out.println(ht); // {10=alan, 5=five, 1=one}

		//ht.put(6,null);
		//System.out.println(ht);// R.E NullPointerException
	
		//ht.put(null,"six");
		//System.out.println(ht); // R.E NullPointerException
	}
}

Q) Write a java program to sort the list?

input:
	6 8 2 9 1 5 

output:
	1 2 5 6 8 9 

import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		List<Integer> list=Arrays.asList(6,8,2,9,1,5);

		Collections.sort(list);

		list.forEach(element -> System.out.print(element+" "));
	}
}

Q) Write a java program to sort the list in descending order?

input:
	6 8 2 9 1 5 

output:
	9 8 6 5 2 1 

ex:

import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		List<Integer> list=Arrays.asList(6,8,2,9,1,5);

		Collections.sort(list); // 1 2 5 6 8 9 

		Collections.reverse(list); // 9 8 6 5 2 1 

		list.forEach(element -> System.out.print(element+" "));
	}
}





Q) Write a java program to display list in reverse order?

input:
	6 8 2 9 1 5 

output:
	5 1 9 2 8 6 

ex:

import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		List<Integer> list=Arrays.asList(6,8,2,9,1,5);

		Collections.reverse(list);

		list.forEach(element -> System.out.print(element+" "));
	}
}

Q) How to make our List as synchronized?

import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		List<Integer> list=Arrays.asList(6,8,2,9,1,5);

		List<Integer> synList=Collections.synchronizedList(list);

		synList.forEach(element-> System.out.print(element+" "));
	}
}

Q) Write a java program to display number of words present in a string?

input:
	this is is java java class 

output:
	this=1  is=2  java=2  class=1 


import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		String str="this is is java java class";
		String[] sarr=str.split(" ");

		Map<String,Integer> map=new LinkedHashMap<String,Integer>();
		
		//for each loop
		for(String s:sarr)
		{
			if(map.get(s)!=null)
			{
				map.put(s,map.get(s)+1);
			}
			else
			{
				map.put(s,1);
			}
		}

		map.forEach((key,value)-> System.out.print(key+"="+value+" "));
	}
}


Q) Write a java program to display number of characters present in a string?

input:
	java

output:
	j=1 a=2 v=1 

 
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		String str="java";
		char[] carr=str.toCharArray();

		Map<Character,Integer> map=new LinkedHashMap<Character,Integer>();
		
		//for each loop
		for(char c:carr)
		{
			if(map.get(c)!=null)
			{
				map.put(c,map.get(c)+1);
			}
			else
			{
				map.put(c,1);
			}
		}
		map.forEach((key,value)-> System.out.print(key+"="+value+" "));
	}
}






































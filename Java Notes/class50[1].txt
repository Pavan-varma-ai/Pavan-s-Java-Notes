
                                                                                                 30/01/2025
Q) When do we get NullPointerException in java?

When our code attempts to read object reference which is not initialized then we will get NullPointerException.
ex:
	Test t=null;
	System.out.println(t.i); // R.E NullPointerException 

	Test t=null;
	t.methodOne(); // R.E NullPointerException 

	int[] arr=null;
	System.out.println(arr[0]); // R.E NullPointerException 

	List<Integer> list=null;
	list.add(10); // R.E NullPointerException 		
	
	Test t=null;
	synchronized(t)
	{
		-
		-
	}
	// R.E NullPointerException 

To overcome this limitation we to perform following things.

1) Initialize the objects before using them

2) Performs null checks before dereferencing an object

3) Using Optional class which is used to perform null checks gracefully.


1) Initialize the objects before using them
-------------------------------------------
	Test t=new Test;
	System.out.println(t.i);  

	Test t=new Test;
	t.methodOne(); 

	int[] arr=new int[3];
	System.out.println(arr[0]);  

	List<Integer> list=new ArrayList<Integer>();
	list.add(10); 		
	
	Test t=new Test();
	synchronized(t)
	{
		-
		-
	}
 

2) Performs null checks before dereferencing an object
------------------------------------------------------
class Test  
{
	int i=10,j=20;

	public static void main(String[] args) 
	{
		Test t=null;
		
		if(t==null)
		{
			t=new Test();
		}

		System.out.println(t.i+" "+t.j);

	}
}

Optional class 
==================
Optional class introduced in Java 8.

It is a final class which is present in java.util package.

The main objective of Optional class is to perform null checks.

There are three ways to create Optional class in java.

ex:
	Optional<Object> optional=Optional.empty() 

	
	Optional<Object> optional=Optional.of()


	Optional<Object> optional=Optional.ofNullable()  


ex:
----
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		Optional<Object> optional=Optional.empty();
		System.out.println(optional);//Optional.empty
	}
}

ex:
---
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		String str="ihub";

		Optional<Object> optional=Optional.of(str);

		System.out.println(optional);//Optional[ihub]

		System.out.println(optional.get()); // ihub 

		System.out.println(optional.isPresent()); // true 
	}
}

ex:
---
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		String str=null;

		Optional<Object> optional=Optional.of(str);

		System.out.println(optional);// R.E NullPointerException
	}
}

ex:
---
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		String str="ihub";

		Optional<Object> optional=Optional.ofNullable(str);

		System.out.println(optional.orElse("Value Not Found"));// ihub
	}
}

ex:
---
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		String str=null;

		Optional<Object> optional=Optional.ofNullable(str);

		System.out.println(optional.orElse("Value Not Found"));// Value Not Found
	}
}

ex:
---
import java.util.*;
class Test  
{
	int i=10,j=20;

	public static void main(String[] args) 
	{
		Test t=null;

		Optional<Object> optional=Optional.ofNullable(t);
		
		if(!optional.isPresent())
		{
			t=new Test();
		}

		System.out.println(t.i+" "+t.j);
	}
}


Stream API 
==========
Stream API introduced in Java 8.

Stream API is present in java.util.stream package.

It allows functional style programming on collections of data(objects).

It is used to process sequences of objects and makes our code more readable and concise.

In short, Stream API is used to perform bulk operations on Collections.


ex:
---
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		List<Integer> list=new ArrayList<Integer>();
		list.add(1);
		list.add(2);
		list.add(3);
		System.out.println(list);//[1,2,3]
	}
}
Note:
-----
	Here list is a mutable object.

ex:
---
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		List<Integer> list=List.of(7,3,9,1);
		
		System.out.println(list);//[7,3,9,1]

		list.add(10); // R.E UnsupportedOperationException
	}
}
Note:
	Here list is a immutable object.

ex:
---
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		List<Integer> list=Arrays.asList(7,3,9,1);
		
		System.out.println(list);//[7,3,9,1]

		list.add(10); // R.E UnsupportedOperationException
	}
}
Note:
	Here list is a immutable object.


ex:
----
import java.util.*;
import java.util.stream.*;
class Test  
{
	public static void main(String[] args) 
	{
		List<Integer> list=Arrays.asList(7,3,9,1,9,5,8,4);
		
		List<Integer> newList= list.stream().filter(i->i%2==0).collect(Collectors.toList());

		System.out.println(newList);
	}
}


ex:
---
import java.util.*;
import java.util.stream.*;
class Test  
{
	public static void main(String[] args) 
	{
		List<Integer> list=Arrays.asList(7,3,9,1,9,5,8,4);
		
		List<Integer> newList= list.stream().sorted().collect(Collectors.toList());

		System.out.println(newList);
	}
}

ex:
---
import java.util.*;
import java.util.stream.*;
class Test  
{
	public static void main(String[] args) 
	{
		List<Integer> list=Arrays.asList(7,3,9,1,9,5,8,4);
		
		List<Integer> newList= list.stream().sorted(Comparator.reverseOrder()).collect(Collectors.toList());

		System.out.println(newList);
	}
}

ex:
---
import java.util.*;
import java.util.stream.*;
class Test  
{
	public static void main(String[] args) 
	{
		List<Integer> list=Arrays.asList(7,3,1,9,5,8,4);
		
		long min= list.stream().min((i1,i2)->i1.compareTo(i2)).get();

		System.out.println(min);
	}
}

ex:
---
import java.util.*;
import java.util.stream.*;
class Test  
{
	public static void main(String[] args) 
	{
		List<Integer> list=Arrays.asList(7,3,1,9,5,8,4);
		
		long max= list.stream().max((i1,i2)->i1.compareTo(i2)).get();

		System.out.println(max);
	}
}

ex:
---
import java.util.*;
import java.util.stream.*;
class Test  
{
	public static void main(String[] args) 
	{
		List<Integer> list=Arrays.asList(7,3,7,1,3,9,9,5,8,5,4);
		
		List<Integer> newList = list.stream().distinct().collect(Collectors.toList());

		System.out.println(newList);
	}
}

ex:
---
import java.util.*;
import java.util.stream.*;
class Test  
{
	public static void main(String[] args) 
	{
		List<Integer> list=Arrays.asList(2,3,7,8,1,4);
		
		long evens = list.stream().filter(i->i%2==0).count();

		System.out.println(evens);
	}
}


forEach() method 
=================
A forEach() method introduced in Java 8.

It is used to iterate objects/elements from Collections.

ex:
---
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		List<Integer> list=Arrays.asList(2,3,7,8,1,4);
		
		list.forEach(element -> System.out.print(element+" "));
	}
}

ex:
---
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		Map<Integer,String> map=Map.of(1,"one",2,"two",3,"three");
		
		map.forEach((key,value)-> System.out.print(key+"="+value+" "));
	}
}


Method Reference (::)
======================
Method reference introduced in Java 8.

It is a special type of lamda expression.

In java, method reference is a concise way to refer a method or constructor,rather then writing entire method call.

ex:
---
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		List<Integer> list=List.of(8,1,3,9,2);

		list.forEach(System.out::println);
	}
}

ex:
--
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		Map<Integer,String> map=Map.of(1,"one",2,"two",3,"three");

		map.forEach(Test::mapEntry);

	}
	//callie method 
	public static void mapEntry(Integer key,String value)
	{
		System.out.println(key+"="+value);
	}
}


Interview Question 
==================

Q) Write a java program to display the employees information in sorting order of employee id?

import java.util.*;
import java.util.stream.*;
class Employee 
{
	private int empId;
	private String empName;
	private double empSal;

	Employee(int empId,String empName,double empSal)
	{
		this.empId=empId;
		this.empName=empName;
		this.empSal=empSal;
	}
	public int getEmpId()
	{
		return empId;
	}
	public String getEmpName()
	{
		return empName;
	}
	public double getEmpSal()
	{
		return empSal;
	}
}
class Test 
{
	public static void main(String[] args)
	{
		ArrayList<Employee> al=new ArrayList<Employee>();
		al.add(new Employee(104,"Erick",4000d));
		al.add(new Employee(102,"Nelson",2000d));
		al.add(new Employee(103,"Jose",3000d));
		al.add(new Employee(101,"Mark",1000d));

		List<Employee> list=al.stream().sorted(Comparator.comparingInt(Employee::getEmpId)).collect(Collectors.toList());

		list.forEach(emp -> System.out.println(emp.getEmpId()+" "+emp.getEmpName()+" "+emp.getEmpSal()));
	}
}


Q) Write a java program to display the employees information in sorting order of employee name?

import java.util.*;
import java.util.stream.*;
class Employee 
{
	private int empId;
	private String empName;
	private double empSal;

	Employee(int empId,String empName,double empSal)
	{
		this.empId=empId;
		this.empName=empName;
		this.empSal=empSal;
	}
	public int getEmpId()
	{
		return empId;
	}
	public String getEmpName()
	{
		return empName;
	}
	public double getEmpSal()
	{
		return empSal;
	}
}
class Test 
{
	public static void main(String[] args)
	{
		ArrayList<Employee> al=new ArrayList<Employee>();
		al.add(new Employee(104,"Erick",4000d));
		al.add(new Employee(102,"Nelson",2000d));
		al.add(new Employee(103,"Jose",3000d));
		al.add(new Employee(101,"Mark",1000d));

		List<Employee> list=al.stream().sorted(Comparator.comparing(Employee::getEmpName)).collect(Collectors.toList());

		list.forEach(emp -> System.out.println(emp.getEmpId()+" "+emp.getEmpName()+" "+emp.getEmpSal()));
	}
}

























































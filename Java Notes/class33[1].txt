                                                                                                                                 02/01/2025

Wrapper classes 
===============
The main objective of wrapper classes are 

1) To wrap primitive type to wrapper object and vice versa.

2) To defined several utility methods.


Primitive type				wrapper class
-----------------------			-------------------
byte 					Byte	
short					Short
int					Integer
long					Long
float					Float 
double					Double 
boolean					Boolean 
char 					Character 

constructor 
------------ 
Every wrapper class supports two ways to create objects. One will take corresponding primitive as an argument and another will take corresponding String as an argument.

ex:
	Wrapper class			constructor
	-------------			--------------
	Byte				byte or String 
	Short				short or String 
	Integer				int or String 
	Long				long or String 
	Float				float or String 
	Double 				double or String 
	Boolean 			boolean or String 
	Character 			char 

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		Integer i1=new Integer(10);
		System.out.println(i1); // 10

		Integer i2=new Integer("20");
		System.out.println(i2); // 20
	}
}

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		Boolean b1=new Boolean(true);
		System.out.println(b1); // true 

		Boolean b2=new Boolean("false");
		System.out.println(b2);// false
	}
}

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		Character c=new Character('a');
		System.out.println(c); // a 
	}
}

Utility Methods 
===============
We have following utility methods.

1) valueOf() 
-----------
It is similar to constructor.
It is used to convert primitive type to wrapper object.

ex:

class Test  
{
	public static void main(String[] args) 
	{
		int a=10;

		//Integer i =10;

		Integer i =Integer.valueOf(a); 

		System.out.println(i); // 10
	}
}



2) xxxValue() 
--------------
It is used to convert wrapper object to primitive type.

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		Integer i=new Integer(10);
		
		// int a = i;

		int a=i.intValue();

		System.out.println(a);

	}
}
ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		Integer i=new Integer(10);

		byte b= i.byteValue();
		System.out.println(b); // 10

		short s=i.shortValue();
		System.out.println(s); // 10

	}
}



3) parseXxx()
------------
It is used to convert string to primitive type.

ex:
--
class Test  
{
	public static void main(String[] args) 
	{
		String str="20";

		int i=Integer.parseInt(str);
		System.out.println(i); //20

		long l=Long.parseLong(str);
		System.out.println(l); // 20

		float f=Float.parseFloat(str);
		System.out.println(f); //20.0

		double d=Double.parseDouble(str);
		System.out.println(d);//20.0
	}
}


4) toString() 
-------------
It is used to convert wrapper object to String type.

ex:
class Test  
{
	public static void main(String[] args) 
	{
		Integer i=new Integer(10);
		
		String str=i.toString();

		System.out.println(str); // 10
	}
}

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		String str= Integer.toString(10);
		System.out.println(str);//10
	}
}

Q) Write a java program to perform sum of two binary numbers?

input:
	1010
	0101
output:
	1111

import java.util.Scanner;
class Test  
{
	public static void main(String[] args) 
	{
		Scanner sc=new Scanner(System.in);
		
		System.out.println("Enter the first binary number : ");
		String binary1=sc.next(); // 1010

		System.out.println("Enter the second binary number :");
		String binary2=sc.next(); // 0101

		//convert binary to decimal 
		int a = Integer.parseInt(binary1,2);
		int b = Integer.parseInt(binary2,2);

		int c = a + b;

		//convert decimal to binary 
		String result = Integer.toBinaryString(c);		
		System.out.println(result);

	}
}

Q) What is Autoboxing ?

Automatic conversion of primitive to corresponding wrapper object by compiler is called Autoboxing.

Ex:
	Integer i=10; 

After compilation the above line will become.

Ex:
	Integer i=Integer.valueOf(10);

That is internally Autoboxing concept is implemented by using valueOf() method. 

ex:
--
class Test  
{
	public static void main(String[] args) 
	{
		int a=10;

		Integer i=a;

		System.out.println(i); // 10
	}	
}

Q) What is Autounboxing ?

Automatic conversion of wrapper object to primitive type by compiler is called Autounboxing.

Ex:
	Integer i=new Integer(10);

After compilation the above line will become.

Ex:
	int val=i.intValue();

That is Autounboxing concept is internally implemented by using xxxValue() method.

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		Integer i=new Integer(10);

		int a=i;

		System.out.println(a); // 10
	}	
}


Inner classes
=============
Sometimes we will declare a class inside another class such concept is called inner class.

ex:
	class Outer_Class
	{
		class Inner_Class
		{
			-
			- //code to be execute 
			-
		}	
	}

Inner classes introduced as a part of event handling to remove GUI bugs.

But due to powerful features and benefits of inner classes. Programmers started to use inner classes in regular programming.

Inner classes does not support static members.

Inner classes must declare with in the scope of enclosing class.


Accessing inner class data from static area of a outer class
------------------------------------------------------------
class Outer 
{
	class Inner 
	{
		public void m1()
		{
			System.out.println("M1-Method");
		}
	}

	public static void main(String[] args)
	{
		Outer.Inner i=new Outer().new Inner();
		i.m1();
	}

}
If we compile above program we will get two .class files i.e Outer.class and Outer$Inner.class.

ex:
---
class Outer 
{
	class Inner 
	{
		public void m1()
		{
			System.out.println("M1-Method");
		}
	}
	public static void main(String[] args)
	{
			new Outer().new Inner().m1();
	}
}


Accessing inner class data from non-static area of a outer class
----------------------------------------------------------------

class Outer 
{
	class Inner 
	{
		public void m1()
		{
			System.out.println("M1-Method");
		}
	}

	public void m2()
	{
		Inner i=new Inner();
		i.m1();
	}

	public static void main(String[] args)
	{
			Outer o=new Outer();
			o.m2();
	}
}


Q) Types of objects in java?

There are two types objects in java.

1) Immutable object 

2) Mutable object 

1) Immutable object 
--------------------
After object creation if we perform any changes then for every change a new object will be created such type of object is called immutable object.
ex:
	String and wrapper classes 

2) Mutable object 
-------------------
After object creation if we perform any changes then all the required changes will be done 
in a same object such type of object is called mutable object.
ex:
	StringBuffer and StringBuilder 


String 
======
A string is a collection of characters which is enclosed in a double quotation.

case1:
------
Once if we create a String object we can't perform any changes. If we perform any changes then for every change a new object will be created such behaviour is called immutability of an object.

Diagram: class33.1	

case2:
------
Difference between == and .equals() method ?

==
---
It is used for reference comparision or address comparision.
It is used to compare primitive type and object type.

ex:
---
class Test
{
	public static void main(String[] args)
	{
		String s1=new String("ihub");
		String s2=new String("talent");
		System.out.println(s1==s2); // false 
	}
}

.equals()
----------
It is used to content comparision and it is a case sensitive.
It is used to compare only object types.

ex:
class Test
{
	public static void main(String[] args)
	{
		String s1=new String("ihub");
		String s2=new String("ihub");
		System.out.println(s1.equals(s2)); // true 
	}
}


































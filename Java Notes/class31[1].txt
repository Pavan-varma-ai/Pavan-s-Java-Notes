                                                                                                                              30/12/2024    

constructor overloading 
=======================
Having same method name with different parameters in a single class is called constructor overloading.

ex:
---
class A 
{
	A()
	{
		System.out.println("0-arg const");
	}
	A(int i)
	{
		System.out.println("int-arg const");
	}
	A(double d)
	{
		System.out.println("double-arg method");
	}
}
class Test  
{
	public static void main(String[] args) 
	{
		A a1=new A();
		A a2=new A(10);
		A a3=new A(10.5d);
	}
}


this keyword
=============
A this keyword is a java keyword which is used to refer current class object reference.

We can utilize this keyword in following ways.

1) To refer current class variables 

2) To refer current class methods 

3) To refer current class constructors 

1) To refer current class variables 
------------------------------------
class A 
{
	//current class variables 
	int i=10;
	int j=20;

	A(int i,int j)
	{		
		System.out.println(i+" "+j);   // 100 200 
		System.out.println(this.i+" "+this.j); // 10 20
	}	
}
class Test 
{
	public static void main(String[] args)
	{
		A a=new A(100,200);	
	}
}

2) To refer current class methods 
---------------------------------
class A 
{
	public void m1()
	{
		System.out.println("M1-Method");
		this.m2();
	}
	public void m2()
	{
		System.out.println("M2-Method");
	}
}
class Test 
{
	public static void main(String[] args)
	{
		A a=new A();
		a.m1();
	}
}

3) To refer current class constructors 
---------------------------------------
class A 
{
	A()
	{
		System.out.println("0-arg const");
	}
	A(int i)
	{
		this();
		System.out.println("int-arg const");
	}
	A(double d)
	{
		this(10);
		System.out.println("double-arg const");
	}
}
class Test 
{
	public static void main(String[] args)
	{
		A a=new A(10.5d);
	}
}

super keyword
=============
A super keyword is a java keyword which is used to refer super class object reference.

We can utilize super keyword in following ways.

1) To refer super class variables 

2) To refer super class methods 

3) To refer super class constructors 


1) To refer super class variables 
----------------------------------
class A 
{
	int i=10;
	int j=20;
}
class B extends A 
{
	int i=100;
	int j=200;

	B(int i,int j)
	{
		System.out.println(this.i+" "+this.j); //  100  200
		System.out.println(super.i+" "+super.j); //  10 20
		System.out.println(i+" "+j); // 1000 2000
	}
}
class Test 
{
	public static void main(String[] args)
	{
		B b=new B(1000,2000);
	}
}

2) To refer super class methods
---------------------------------
class A 
{
	public void m1()
	{
		System.out.println("M1-Method");
	}
}
class B extends A 
{
	public void m2()
	{
		super.m1();
		System.out.println("M2-Method");
	}
}
class Test 
{
	public static void main(String[] args)
	{
		B b=new B();
		b.m2();
	}
}


3) To refer super class constructors
-------------------------------------
class A 
{
	A()
	{
		System.out.println("A-const");
	}
}
class B extends A 
{
	B()
	{
		super();
		System.out.println("B-const");
	}
}
class Test 
{
	public static void main(String[] args)
	{
		B b =new B();
	}
}


Interface
=========
Interface is a collection of zero or more abstraction methods.

Abstract method is a incomplete method because it ends with semicolon and does not have any body.

In short, abstract method is a non-implementation method.

ex:
	void methodOne();

It is not possible to create object for interfaces.

To write the implementation of abstract methods we need to use implementation class.

It is possible to create object for implementation class because it contains method with body.

By default every abstract method is a public and abstract.
ex:
	public abstract void methodOne();

Interface contains only constants i.e public static final.

syntax:
------
	interface  interface_name
	{
		-
		- //abstract methods 
		- //constants 
		-
	}

If we know only service requirement specification then we need to use interface.

Diagram: class31.1

ex:
---
interface A 
{
	//abstract methods 
	public abstract void m1();
}
class B implements A 
{
	public void m1()
	{
		System.out.println("M1-Method");
	}
}
class Test 
{
	public static void main(String[] args)
	{
		A a = new B();
		a.m1();
	}
}

ex:
---
interface A 
{
	//abstract methods 
	public abstract void m1();
}
class B implements A 
{
	@Override
	public void m1()
	{
		System.out.println("M1-Method");
	}
}
class Test 
{
	public static void main(String[] args)
	{
		A a = new B();
		a.m1();
	}
}

ex:
---
interface A 
{
	//abstract methods 
	public abstract void m1();
}

class Test 
{
	public static void main(String[] args)
	{
		//anonymous inner class
		A a=new A()
		{
			public void m1()
			{
				System.out.println("From M1-Method");
			}
		};
		a.m1();
	}
}

If interface contains four methods then compulsary we need to override all methods otherwise we will get compile time error.

ex:
---
interface A 
{
	//abstract methods 
	public abstract void see();
	public void show();
	abstract void display();
	void view();
}
class B implements A 
{
	public void see()
	{
		System.out.println("See-Method");
	}
	public void show()
	{
		System.out.println("Show-Method");
	}
	public void display()
	{
		System.out.println("Display-Method");
	}
	public void view()
	{
		System.out.println("View-Method");
	}
}

class Test 
{
	public static void main(String[] args)
	{
		A a=new B();
		a.see();
		a.show();
		a.display();
		a.view();
	}
}

In java, interface can extends more then one interface.

ex:
---
interface A 
{
	void m1();
}
interface B 
{
	void m2();
}
interface C extends A,B
{
	void m3();
}
class D implements C 
{
	public void m1()
	{
		System.out.println("M1-Method");
	}
	public void m2()
	{
		System.out.println("M2-Method");
	}
	public void m3()
	{
		System.out.println("M3-Method");
	}
}
class Test 
{
	public static void main(String[] args)
	{
		D d = new D();
		d.m1();
		d.m2();
		d.m3();
	}
}

In java, a class can implements more then on interface.

ex:
---
interface Father 
{
	float HT=6.2f;
	void height();
}
interface Mother 
{
	float HT=5.8f;
	void height();
}
class Child implements Father,Mother 
{
	public void height()
	{
		float height = (Father.HT+Mother.HT)/2;
		System.out.println("Child  Height : "+height);
	}
}
class Test 
{
	public static void main(String[] args)
	{
		Child c=new Child();
		c.height();
	}
}

Note:
-----
From Java 8 version onwards interface is a collection of abstract methods, default methods and static methods.


Marker interface
=================
Interface which does not have any methods or constants is called marker interface.

In general, empty interface is called marker interface.

By using marker interface we will get some ability to do.

We have following list of marker interfaces in java.

ex:
	Serializable 
	Cloneable  
	Remote 
	and etc.


ex:
---

class Test implements Cloneable 
{
	int i;
	public static void main(String[] args)throws CloneNotSupportedException
	{
		
		Test t1=new Test();
		t1.i=10;
		System.out.println(t1.i);//10
		System.out.println(t1.hashCode());//1940030785


		Test t2=(Test)t1.clone();
		System.out.println(t2.i);//10
		System.out.println(t2.hashCode());//1940030785
	}
}





























































